from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update
from aiogram.filters.command import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import os
import asyncio

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")  # —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üì¶ –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üì≤ –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="üìù –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å")],
        [KeyboardButton(text="üåê –°–æ—Ü—Å–µ—Ç–∏")]
    ],
    resize_keyboard=True
)

back_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Goodshop</b> ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –∑–∞–∫—É–ø–∫–µ –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ü—É—Å–∞–Ω–∞ üá∞üá∑!\n\n"
        "üìç –ù–∞—à —Å–∫–ª–∞–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–π–æ–Ω–µ –¢–µ—Ö–∞—Å-—Å—Ç—Ä–∏—Ç (Î∂ÄÏÇ∞ Ï§ëÍµ¨ Ï¥àÎüâÏ§ëÎ°ú6Î≤àÍ∏∏ 10) ‚Äî —ç—Ç–æ —É–¥–æ–±–Ω–æ –¥–ª—è —à–∏–ø—á–∞–Ω–¥–ª–µ—Ä–æ–≤ –∏ –æ–ø—Ç–æ–≤–∏–∫–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá",
        parse_mode="HTML",
        reply_markup=main_menu
    )

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ —É —Ç–µ–±—è (–∫–æ–ø–∏—Ä—É–π —Å—é–¥–∞)

@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
async def handle_update(request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.process_update(update)
        return web.Response(text="OK")
    except Exception as e:
        print(f"Error: {e}")
        return web.Response(status=500)

async def on_startup(app):
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
    await bot.set_webhook(webhook_url)
    print(f"Webhook set to: {webhook_url}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.close()

app = web.Application()
app.router.add_post('/webhook', handle_update)
app.router.add_get('/healthz', lambda request: web.Response(text="OK"))

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, port=8000)
